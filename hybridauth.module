<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function hybridauth_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // @todo remove this later and use block or widget or whatever.
  if ($form_id == 'user_login_form') {
    $form['hybridauth'] = [
      '#title' => t('Log in with Linkedin'),
      '#type' => 'link',
      '#url' => Url::fromRoute('hybridauth.authenticate', ['provider_id' => 'LinkedIn']),
    ];

    $form['hybridauth_facebook'] = [
      '#title' => t('Log in with Facebook'),
      '#type' => 'link',
      '#url' => Url::fromRoute('hybridauth.authenticate', ['provider_id' => 'Facebook']),
    ];

    $form['hybridauth_google'] = [
      '#title' => t('Log in with Google'),
      '#type' => 'link',
      '#url' => Url::fromRoute('hybridauth.authenticate', ['provider_id' => 'Google']),
    ];

    $form['hybridauth_bitbucket'] = [
      '#title' => t('Log in with BitBucket'),
      '#type' => 'link',
      '#url' => Url::fromRoute('hybridauth.authenticate', ['provider_id' => 'BitBucket']),
    ];

    $form['hybridauth_yahoo'] = [
      '#title' => t('Log in with Yahoo'),
      '#type' => 'link',
      '#url' => Url::fromRoute('hybridauth.authenticate', ['provider_id' => 'Yahoo']),
    ];
  }

}

/**
 * Internal functions.
 */
function hybridauth_providers_list($reset = FALSE) {
  $providers = &drupal_static(__FUNCTION__, NULL);

  $test = hybridauth_providers_files($reset);

  if (!isset($providers)) {
    $raw_providers = [];
    foreach (hybridauth_providers_files($reset) as $name => $file) {
      if (!array_key_exists($name, $raw_providers)) {
        $raw_providers[$name] = t($name);
      }
    }

    $providers = array();
    $enabled_providers = array_filter(\Drupal::state()->get('hybridauth_providers', []));
    foreach (array_keys($enabled_providers + $raw_providers) as $provider_id) {
      $providers[$provider_id] = $raw_providers[$provider_id];
    }
  }

  return $providers;
}

/**
 * Returns available providers files, keyed by filename without extension.
 */
function hybridauth_providers_files($reset = FALSE) {
  $files = array();
  // Try to get cached value if allowed: $reset == FALSE.
  if (!$reset) {
    $cache = \Drupal::cache()->get('hybridauth_providers_files');
    if (!empty($cache->data)) {
      $files = $cache->data;
    }
  }

  // Scan Providers directory if $reset == TRUE or there was no cached value.
  if (empty($files)) {
    $files = \Drupal::service('file_system')
      ->scanDirectory(
        _hybridauth_library_path() . '/hybridauth/src/Provider',
        '/\.php$/',
        ['key' => 'name']
      );
    \Drupal::cache()->set('hybridauth_providers_files', $files);
  }
  return $files;
}

/**
 * Returns the path to the HybridAuth library.
 */
function _hybridauth_library_path() {
  $library_path = &drupal_static(__FUNCTION__, NULL);

  if (!isset($library_path)) {
    // Check if the variable is set.
    $library_path = \Drupal::state()->get('hybridauth_library_path', '');

    if (empty($library_path)) {
      // Use libraries module or profile directory, fallback to standard directory.
      if (\Drupal::moduleHandler()->moduleExists('libraries')) {
        // @todo Need check this case.
        $library_path = libraries_get_libraries(['libraries']);
      }
      else {
        $profile = drupal_get_path('profile', \Drupal::installProfile());
        $library_path = $profile . '/libraries/hybridauth';
        if (!file_exists($library_path)) {
          $library_path = '../vendor/hybridauth';
        }
      }
    }
    if (file_exists($library_path . '/hybridauth/src/Hybridauth.php')) {
    }
    // @todo Check this condition.
    elseif (file_exists($library_path . '/hybridauth/src/Hybridauth.php')) {
      $library_path .= '/hybridauth';
    }
    else {
      \Drupal::logger('hybridauth')->notice('HybridAuth library is missing.', []);
      $library_path = FALSE;
    }
  }

  return $library_path;
}

/**
 * Pre-render callback for the providers tableselect.
 */
function hybridauth_admin_providers_pre_render($element) {
  // Add weight column.
  $element['#header']['weight'] = t('Weight');
  foreach (array_keys($element['#options']) as $provider_id) {
    $key = 'hybridauth_provider_' . $provider_id . '_weight';
    $element['#options'][$provider_id]['weight'] = array(
      'data' => \Drupal::service('renderer')->render($element[$key]),
    );
    unset($element[$key]);
  }

  // Assign id to the table.
  $table_id = 'hybridauth-providers';
  $element['#attributes'] = ['id' => $table_id];

  return $element;
}
